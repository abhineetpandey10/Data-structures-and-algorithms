#include<iostream>
using std::cin;
using std::cout;
using std::endl;
#include<cmath>
/**
 * We use the optimal substructures:
 * nCr=(n-1)C(r-1) + nC(r-1)
 * nC0=nCn=1
 **/
uint64_t nCr(uint64_t n, uint64_t r)
{
    uint64_t arr[n+1][r+1];
    for(uint64_t i=0;i<=n;i++)
    {
        for(uint64_t j=0;j<=r;j++)
        {
            if(i==j || j==0 || i==0) //nCn=nC0=1
                arr[i][j]=1;
            else 
                arr[i][j]=arr[i-1][j-1]+arr[i-1][j]; //nCr=(n-1)C(r-1) + nC(r-1)
        }   
    }
    return arr[n][r];
}
int main()
{
    while(1)
    {
        uint64_t n,r;
        cin>>n>>r;
        cout<<nCr(n,r)<<endl;
    }
}
